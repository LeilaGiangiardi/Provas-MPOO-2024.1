package view;

import model.BaseDados;
import model.CampanhaQueimaEstoque;
import model.Compra;
import model.Gerente;
import model.Produto;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

public class TelaProdutos extends JFrame {
    private JTable table;
    private DefaultTableModel tableModel;
    private Gerente gerente;
    private Compra compra;
    private JLabel valorTotalLabel;

    public TelaProdutos() {
        setTitle("Sistema de Supermercado");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        initUI();
    }

    private void initUI() {
        // Obter a única instância do Gerente
        gerente = Gerente.getInstancia("Jose Santos", "111.111.111-11", 3200.50);
        BaseDados.inicializarBase();
        compra = new Compra();

        // Criar layout
        JPanel panel = new JPanel(new BorderLayout());

        // Criar a tabela de produtos
        tableModel = new DefaultTableModel(new Object[]{"Nome", "Código", "Preço", "Estoque", "Validade"}, 0);
        table = new JTable(tableModel);
        updateTable();

        // Botões para realizar ações
        JButton carrinhoButton = new JButton("Carrinho");
        JButton queimaEstoqueButton = new JButton("Aplicar Queima de Estoque");
        JButton exibirButton = new JButton("Exibir Produtos");

        // Label para exibir o valor total da compra
        valorTotalLabel = new JLabel("Valor total: R$ 0,00");

        carrinhoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                abrirCarrinho();
            }
        });

        queimaEstoqueButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CampanhaQueimaEstoque.aplicarCampanha();
                updateTable();
                JOptionPane.showMessageDialog(null, "Campanha de queima de estoque aplicada!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        exibirButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTable();
            }
        });

        // Adicionar componentes à interface
        panel.add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(carrinhoButton);
        buttonPanel.add(queimaEstoqueButton);
        buttonPanel.add(exibirButton);

        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BorderLayout());
        bottomPanel.add(valorTotalLabel, BorderLayout.WEST);

        panel.add(buttonPanel, BorderLayout.NORTH);
        panel.add(bottomPanel, BorderLayout.SOUTH);
        add(panel);
    }

    // Método para atualizar a tabela de produtos
    private void updateTable() {
        tableModel.setRowCount(0); // Limpar tabela
        ArrayList<Produto> produtos = BaseDados.getProdutos();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        for (Produto produto : produtos) {
            tableModel.addRow(new Object[]{
                    produto.getNome(),
                    produto.getCodBarras(),
                    produto.getPreco(),
                    produto.getEstoque(),
                    sdf.format(produto.getValidade())
            });
        }
    }

    // Método para abrir o carrinho
    private void abrirCarrinho() {
        JFrame carrinhoFrame = new JFrame("Carrinho de Compras");
        carrinhoFrame.setSize(400, 300);
        carrinhoFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        carrinhoFrame.setLocationRelativeTo(null);

        DefaultTableModel carrinhoTableModel = new DefaultTableModel(new Object[]{"Produto", "Quantidade", "Preço"}, 0);
        JTable carrinhoTable = new JTable(carrinhoTableModel);

        // Atualiza a tabela do carrinho
        for (Produto produto : compra.getProdutos().keySet()) {
            int quantidade = compra.getProdutos().get(produto);
            carrinhoTableModel.addRow(new Object[]{produto.getNome(), quantidade, produto.getPreco() * quantidade});
        }


        // Botão para cancelar a compra
        JButton cancelarCompraButton = new JButton("Cancelar Compra");
        cancelarCompraButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                compra = new Compra(); // Reiniciar a compra
                carrinhoFrame.dispose();
                atualizarValorTotal();
                JOptionPane.showMessageDialog(null, "Compra cancelada!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        // Botão para finalizar a compra
        JButton finalizarCompraButton = new JButton("Finalizar Compra");
        finalizarCompraButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gerente.darDesconto(compra);
                JOptionPane.showMessageDialog(null, "Compra finalizada! Valor total: R$ " + compra.getValorTotal(), "Total", JOptionPane.INFORMATION_MESSAGE);
                compra = new Compra(); // Reiniciar a compra após finalizar
                carrinhoFrame.dispose();
                atualizarValorTotal();
            }
        });

        // Painel de botões do carrinho
        JPanel carrinhoButtonPanel = new JPanel();
        carrinhoButtonPanel.add(cancelarCompraButton);
        carrinhoButtonPanel.add(finalizarCompraButton);

        carrinhoFrame.add(new JScrollPane(carrinhoTable), BorderLayout.CENTER);
        carrinhoFrame.add(carrinhoButtonPanel, BorderLayout.SOUTH);
        carrinhoFrame.setVisible(true);
    }

    // Método para atualizar o valor total
    private void atualizarValorTotal() {
        valorTotalLabel.setText("Valor total: R$ " + compra.getValorTotal());
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TelaProdutos().setVisible(true);
            }
        });
    }
}
